{"version":3,"sources":["components/core/Container.tsx","components/core/Content.tsx","components/core/LoadingSpinner.tsx","components/core/Card.tsx","store/api/apiActions.ts","serviceWorker.ts","store/ws/wsActions.ts","store/ws/wsSaga.ts","store/api/apiSaga.ts","store/api/constant.ts","store/sagas.ts","store/ws/wsReducer.ts","store/api/apiReducer.ts","store/reducers.ts","store/index.ts","components/layout/Header.tsx","components/layout/Layout.tsx","components/layout/Nav.tsx","components/layout/Connect.tsx","components/pages/NotFound.tsx","index.tsx"],"names":["Container","styled","div","attrs","props","className","children","Content","Card","FETCH_IMG","FETCH_IMG_SUCC","FETCH_IMG_FAILED","FETCH_POOL_DEBT","FETCH_POOL_DEBT_SUCC","FETCH_POOL_DEBT_FAILED","FETCH_REPORT","FETCH_REPORT_SUCC","FETCH_REPORT_FAILED","Boolean","window","location","hostname","match","connectWS","wsSaga","connection","prohashing","apiKey","_debug","subscribe","put","type","actions","console","log","takeLatest","getImgUrl","getPoolDebt","getReport","apiSaga","url","call","axios","get","status","data","img_url","status_code","pool_debt","select","state","api","date","report","rootSaga","all","defaultState","blocks","profitability","rootReducer","combineReducers","ws","action","Object","assign","incoming","_","unionBy","system_status","hashrate","newBlocks","arr","map","e","extend","now","Date","newBalance","balance","sagaMiddleware","createSagaMiddleware","enhancer","composeWithDevTools","applyMiddleware","createStore","run","Header","path","href","substring","charAt","toUpperCase","slice","Layout","Nav","icon","faChartLine","faChartPie","faFileAlt","faUser","Connect","useSelector","dispatch","useDispatch","useState","setIncoming","setNewBlocks","useEffect","apiActions","wsActions","on","update","rest","values","subscriptions_count","block_template_count","total_hashrate_with_defaults","removeAllListeners","NotFound","LiveProfit","lazy","RecentBlocks","Charts","Report","Dashbord","routes","Root","routeResult","useRoutes","usePath","store","fallback","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","JavascriptTimeAgo","addLocale","en"],"mappings":"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","file":"static/js/main.cf780ce9.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Container = styled.div.attrs((props) => ({\n    className: `text-app_ivory w-full  ${props.children}`,\n}))``;\n\nexport default Container;\n","import styled from 'styled-components';\n\nconst Content = styled.div.attrs((props) => ({\n    className: `h-screen px-4  pb-24 overflow-y-scroll scrolling-touch ${props}`,\n}))``;\n\nexport default Content;\n","import React from 'react';\nimport styled from 'styled-components';\nimport tw from 'tailwind.macro';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\n\nconst Overlay = styled.div.attrs({\n    className:\n        'fixed top-0 left-0 z-50 flex items-center justify-center block w-full h-full bg-black',\n})`\n    & {\n        span {\n            ${tw`block w-0 h-0 -mt-12 text-app_gray`}\n        }\n    }\n`;\n\nexport default function LoadingSpinner() {\n    return (\n        <Overlay>\n            <FontAwesomeIcon icon={faCircleNotch} size='2x' spin />\n        </Overlay>\n    );\n}\n","import styled from 'styled-components';\n\nconst Card = styled.div.attrs((props) => ({\n    className: `w-full p-4 mt-4 rounded-lg bg-app_dark  ${props.children}`,\n}))``;\n\nexport default Card;\n","export default {\n    FETCH_IMG: 'api/FETCH_IMG',\n    FETCH_IMG_SUCC: 'api/FETCH_IMG_SUCC',\n    FETCH_IMG_FAILED: 'api/FETCH_IMG_FAILED',\n    FETCH_POOL_DEBT: 'api/FETCH_POOL_DEBT',\n    FETCH_POOL_DEBT_SUCC: 'api/FETCH_POOL_DEBT_SUCC',\n    FETCH_POOL_DEBT_FAILED: 'api/FETCH_POOL_DEBT_FAILED',\n    FETCH_REPORT: 'api/FETCH_REPORT',\n    FETCH_REPORT_SUCC: 'api/FETCH_REPORT_SUCC',\n    FETCH_REPORT_FAILED: 'api/FETCH_REPORT_FAILED',\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","export default {\n    CONNECT: 'ws/CONNECT',\n    CONNECT_SUCC: 'ws/CONNECT_SUCC',\n    UPDATE_PROFIBILITY: 'ws/UPDATE_PROFIBILITY',\n    UPDATE_SYSTEM_STATUS: 'ws/UPDATE_SYSTEM_STATUS',\n    UPDATE_HASHRATE: 'ws/UPDATE_HASHRATE',\n    RECENT_BLOCK: 'ws/RECENT_BLOCK',\n    UPDATE_BALANCE: 'WS/UPDATE_BALANCE',\n};\n","import { takeLatest, put } from 'redux-saga/effects';\nimport prohashing from 'prohashing-api';\nimport actions from './wsActions';\n\nfunction* connectWS() {\n    try {\n        const connection = new prohashing({\n            apiKey: '0a7a6fade943f7b6b9e96b4d1516bfcc733b5158af18d1b43aeec7e45a238c02',\n            _debug: false,\n            subscribe: 'all',\n        });\n        yield put({\n            type: actions.CONNECT_SUCC,\n            connection,\n        });\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nexport function* wsSaga() {\n    yield takeLatest(actions.CONNECT, connectWS);\n}\n","import { takeLatest, put, call, select } from 'redux-saga/effects';\nimport axios from 'axios';\nimport actions from './apiActions';\nimport { SUCCESS, FAILED, ERROR } from './constant';\n\nconst url: string = 'https://prohashing.com/';\n\nfunction* getImgUrl() {\n    try {\n        const { status, data } = yield call(axios.get, url + 'coin/images');\n\n        if (status === 200) {\n            yield put({\n                type: actions.FETCH_IMG_SUCC,\n                img_url: data,\n                status_code: SUCCESS,\n            });\n            return;\n        }\n\n        yield put({\n            type: actions.FETCH_IMG_FAILED,\n            status_code: FAILED,\n        });\n    } catch (e) {\n        yield put({\n            type: actions.FETCH_IMG_FAILED,\n            status_code: ERROR,\n        });\n    }\n}\n\nfunction* getPoolDebt() {\n    try {\n        const { status, data } = yield call(axios.get, url + 'statusPoolDebt');\n        if (status === 200) {\n            yield put({\n                type: actions.FETCH_POOL_DEBT_SUCC,\n                pool_debt: data,\n                status_code: SUCCESS,\n            });\n            return;\n        }\n    } catch (e) {\n        yield put({\n            type: actions.FETCH_POOL_DEBT_FAILED,\n            status_code: ERROR,\n        });\n    }\n}\n\nfunction* getReport() {\n    const state = yield select((state) => state.api.date);\n    try {\n        const { status, data } = yield call(\n            axios.get,\n            url + `maintenance/profit?startDate=${state}`\n        );\n        if (status === 200) {\n            yield put({\n                type: actions.FETCH_REPORT_SUCC,\n                report: data,\n                status_code: SUCCESS,\n            });\n            return;\n        }\n        yield put({\n            type: actions.FETCH_REPORT_FAILED,\n            status_code: FAILED,\n        });\n    } catch (e) {\n        yield put({\n            type: actions.FETCH_REPORT_FAILED,\n            status_code: ERROR,\n        });\n    }\n}\n\nexport function* apiSaga() {\n    yield takeLatest(actions.FETCH_IMG, getImgUrl);\n    yield takeLatest(actions.FETCH_POOL_DEBT, getPoolDebt);\n    yield takeLatest(actions.FETCH_REPORT, getReport);\n}\n","export const SUCCESS = 0;\nexport const FAILED = 1;\nexport const ERROR = 2;\n","import { all } from 'redux-saga/effects';\nimport { wsSaga } from './ws/wsSaga';\nimport { apiSaga } from './api/apiSaga';\n\nexport default function* rootSaga() {\n    yield all([wsSaga(), apiSaga()]);\n}\n","import actions from './wsActions';\nimport _ from 'lodash';\n\nconst defaultState = {\n    blocks: [],\n    profitability: [],\n};\nexport function wsReducer(state = defaultState, action: any) {\n    switch (action.type) {\n        case actions.CONNECT:\n            return Object.assign({}, state, action);\n\n        case actions.CONNECT_SUCC:\n            const { connection } = action;\n            return { ...state, connection };\n\n        case actions.UPDATE_PROFIBILITY:\n            const { incoming } = action;\n            const profitability = _.unionBy(incoming, state.profitability, 'algorithm_name');\n            return { ...state, profitability };\n\n        case actions.UPDATE_SYSTEM_STATUS:\n            const { system_status } = action;\n            return { ...state, system_status };\n\n        case actions.UPDATE_HASHRATE:\n            const { hashrate } = action;\n            return { ...state, hashrate };\n\n        case actions.RECENT_BLOCK:\n            const { newBlocks } = action;\n            const arr = _.map(newBlocks, (e) => {\n                return _.extend({}, e, { now: new Date() });\n            });\n            const blocks = _.unionBy(arr, state.blocks, 'block_hash');\n            return { ...state, blocks };\n\n        case actions.UPDATE_BALANCE:\n            const { newBalance } = action;\n            return { ...state, balance: newBalance };\n        default:\n            return state;\n    }\n}\n","import actions from './apiActions';\n\nconst defaultState = {};\nexport function apiReducer(state = defaultState, action: any) {\n    switch (action.type) {\n        case actions.FETCH_IMG:\n            return Object.assign({}, state, action);\n\n        case actions.FETCH_IMG_SUCC:\n            const { img_url } = action;\n            return { ...state, img_url, status_code: action.status_code };\n\n        case actions.FETCH_IMG_FAILED:\n            return { ...state, status_code: action.status_code };\n\n        case actions.FETCH_POOL_DEBT:\n            return Object.assign({}, state, action);\n\n        case actions.FETCH_POOL_DEBT_SUCC:\n            const { pool_debt } = action;\n            return { ...state, pool_debt, status_code: action.status_code };\n\n        case actions.FETCH_POOL_DEBT_FAILED:\n            return { ...state, status_code: action.status_code };\n\n        case actions.FETCH_REPORT:\n            return Object.assign({}, state, action);\n\n        case actions.FETCH_REPORT_SUCC:\n            const { report } = action;\n            return { ...state, report, status_code: action.status_code };\n\n        case actions.FETCH_REPORT_FAILED:\n            return { ...state, status_code: action.status_code };\n\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport { wsReducer } from './ws/wsReducer';\nimport { apiReducer } from './api/apiReducer';\n\nexport const rootReducer = combineReducers({\n    ws: wsReducer,\n    api: apiReducer,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// import saga\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\n\n// import reducer\nimport { rootReducer } from './reducers';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst enhancer = composeWithDevTools(applyMiddleware(sagaMiddleware));\n\nexport default createStore(rootReducer, {}, enhancer);\nsagaMiddleware.run(rootSaga);\n","import React from 'react';\nimport { A } from 'hookrouter';\n\nexport default function Header({ path }: { path: string }) {\n    return (\n        <div\n            className={`absolute top-0 z-10 flex justify-between w-full px-8 pt-4 text-xl font-medium bg-black opacity-90 ${\n                path === '/report' ? 'pb-0' : 'pb-0'\n            }`}\n        >\n            {path === '/' || path === '/blocks' ? (\n                <>\n                    <A href='/' className={path === '/' ? 'text-app_ivory' : 'text-app_gray'}>\n                        Live Profit\n                    </A>\n                    <A\n                        href='/blocks'\n                        className={path === '/blocks' ? 'text-app_ivory' : 'text-app_gray'}\n                    >\n                        Recent Blocks\n                    </A>\n                </>\n            ) : (\n                <h1>{path.substring(1).charAt(0).toUpperCase() + path.slice(2)}</h1>\n            )}\n        </div>\n    );\n}\n","import React from 'react';\nimport { Container } from '../core';\n\nexport default function Layout({ children }: { children: any }) {\n    return (\n        <Container className={'h-screen xl:mx-auto relative bg-black  xl:w-1/3'}>\n            <>{children}</>\n        </Container>\n    );\n}\n","import React from 'react';\nimport { A } from 'hookrouter';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChartLine, faChartPie, faFileAlt, faUser } from '@fortawesome/free-solid-svg-icons';\n\nfunction Nav() {\n    return (\n        <div className='absolute bottom-0 left-0 z-10 w-full h-auto pb-4 overflow-hidden bg-app_dark'>\n            <nav className='flex items-center justify-between px-8 pt-2 pb-5 text-2xl bg-app_dark text-app_ivory rounded-md'>\n                <A href='/'>\n                    <FontAwesomeIcon icon={faChartLine} />\n                </A>\n                <A href='/charts'>\n                    <FontAwesomeIcon icon={faChartPie} />\n                </A>\n                <A href='/report'>\n                    <FontAwesomeIcon icon={faFileAlt} />\n                </A>\n                <A href='/dashboard'>\n                    <FontAwesomeIcon icon={faUser} />\n                </A>\n            </nav>\n        </div>\n    );\n}\n\nexport default Nav;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport wsActions from '../../store/ws/wsActions';\nimport apiActions from '../../store/api/apiActions';\nimport { RootState } from '../../types';\n\nexport default function Connect({ children }: { children: any }) {\n    const connection: any = useSelector<RootState>((state) => state.ws.connection);\n    const dispatch = useDispatch();\n    const [incoming, setIncoming] = useState([]);\n    const [newBlocks, setNewBlocks] = useState([]);\n    const [newBalance, setnewBalance] = useState([]);\n    useEffect(() => {\n        dispatch({\n            type: apiActions.FETCH_IMG,\n        });\n\n        dispatch({\n            type: wsActions.CONNECT,\n        });\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (connection) {\n            connection.on('profitability', (update: any) => {\n                const { ...rest } = update[0] ? update[0] : update;\n                setIncoming(Object.values(rest));\n            });\n            connection.on('systemStatus', (update: any) => {\n                const {\n                    subscriptions_count,\n                    block_template_count,\n                    total_hashrate_with_defaults,\n                } = update[0] ? update[0] : update;\n\n                dispatch({\n                    type: wsActions.UPDATE_SYSTEM_STATUS,\n                    system_status: [subscriptions_count, block_template_count],\n                });\n\n                dispatch({\n                    type: wsActions.UPDATE_HASHRATE,\n                    hashrate: { ...total_hashrate_with_defaults },\n                });\n            });\n\n            connection.on('block', (update: any) => {\n                const new_blocks = update;\n                setNewBlocks(new_blocks);\n            });\n\n            return () => {\n                connection.removeAllListeners();\n            };\n        }\n    }, [dispatch, connection]);\n\n    useEffect(() => {\n        dispatch({\n            type: wsActions.UPDATE_PROFIBILITY,\n            incoming,\n        });\n    }, [dispatch, incoming]);\n\n    useEffect(() => {\n        dispatch({\n            type: wsActions.RECENT_BLOCK,\n            newBlocks,\n        });\n    }, [dispatch, newBlocks]);\n\n    useEffect(() => {\n        dispatch({\n            type: wsActions.UPDATE_BALANCE,\n            newBalance,\n        });\n    }, [dispatch, newBalance]);\n\n    return <>{children}</>;\n}\n","import React from 'react';\n\nexport default function NotFound() {\n    return <div>404</div>;\n}\n","import React, { Suspense, lazy } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useRoutes, usePath } from 'hookrouter';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store';\nimport './styles/build/index.css';\n\nimport JavascriptTimeAgo from 'javascript-time-ago';\nimport en from 'javascript-time-ago/locale/en';\n\n// import LoadingSpinner from './components/core/LoadingSpinner';\nimport { Header, Layout, Nav, Connect } from './components/layout';\nimport NotFound from './components/pages/NotFound';\n\nconst LiveProfit = lazy(() => import('./components/pages/LiveProfit'));\nconst RecentBlocks = lazy(() => import('./components/pages/RecentBlocks'));\nconst Charts = lazy(() => import('./components/pages/Charts'));\nconst Report = lazy(() => import('./components/pages/Report'));\nconst Dashbord = lazy(() => import('./components/pages/Dashboard'));\n\nconst routes = {\n    '/': () => <LiveProfit />,\n    '/blocks': () => <RecentBlocks />,\n    '/charts': () => <Charts />,\n    '/report': () => <Report />,\n    '/dashboard': () => <Dashbord />,\n};\n\nfunction Root() {\n    const routeResult = useRoutes(routes);\n    const path = usePath();\n\n    return (\n        <Provider store={store}>\n            <Connect>\n                <Layout>\n                    <Header path={path} />\n                    <Suspense fallback={<></>}>{routeResult || <NotFound />}</Suspense>\n                    <Nav />\n                </Layout>\n            </Connect>\n        </Provider>\n    );\n}\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nJavascriptTimeAgo.addLocale(en);\n"],"sourceRoot":""}