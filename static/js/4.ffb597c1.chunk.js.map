{"version":3,"sources":["components/pages/Charts/components/MinerCount.tsx"],"names":["MinerCount","dispatch","useDispatch","miner_count","useSelector","state","api","useEffect","type","apiActions","FETCH_MINER_COUNT","data","labels","_","map","sort","a","b","n","d","Date","getMonth","getDate","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","height","options","legend","fontColor","maintainAspectRatio","scales","yAxes","ticks","xAxes"],"mappings":"0GAAA,qHAQe,SAASA,IACpB,IAAMC,EAAWC,cACXC,EAAmBC,aAAuB,SAACC,GAAD,OAAWA,EAAMC,IAAIH,eAMrE,OALAI,qBAAU,WACNN,EAAS,CACLO,KAAMC,IAAWC,sBAEtB,CAACT,IAEA,kBAAC,IAAD,KACI,kBAAC,OAAD,CACIU,KAAM,CACFC,OAAQC,IAAEC,IACND,IAAEC,IAAIX,EAAa,QAAQY,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,MAC9C,SAACC,GACG,IAAMC,EAAI,IAAIC,KAAKF,GACnB,MAAM,GAAN,OAAUC,EAAEE,WAAa,EAAzB,cAAgCF,EAAEG,cAG1CC,SAAU,CACN,CACIC,MAAO,eACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChB9B,KAAME,IAAEC,IAAIX,EAAa,aAIrCuC,OAAQ,IACRC,QAAS,CACLC,OAAQ,CAAEhC,OAAQ,CAAEiC,UAAW,YAC/BC,qBAAqB,EACrBC,OAAQ,CACJC,MAAO,CACH,CACIC,MAAO,CACHJ,UAAW,aAIvBK,MAAO,CACH,CACID,MAAO,CACHJ,UAAW","file":"static/js/4.ffb597c1.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { Card } from '../../../core';\nimport { Line } from 'react-chartjs-2';\nimport { useDispatch, useSelector } from 'react-redux';\nimport apiActions from '../../../../store/api/apiActions';\nimport { RootState } from '../../../../types';\nimport _ from 'lodash';\n\nexport default function MinerCount() {\n    const dispatch = useDispatch();\n    const miner_count: any = useSelector<RootState>((state) => state.api.miner_count);\n    useEffect(() => {\n        dispatch({\n            type: apiActions.FETCH_MINER_COUNT,\n        });\n    }, [dispatch]);\n    return (\n        <Card>\n            <Line\n                data={{\n                    labels: _.map(\n                        _.map(miner_count, 'date').sort((a, b) => a - b),\n                        (n) => {\n                            const d = new Date(n);\n                            return `${d.getMonth() + 1} / ${d.getDate()}`;\n                        }\n                    ),\n                    datasets: [\n                        {\n                            label: 'Miner counts',\n                            fill: false,\n                            lineTension: 0.1,\n                            backgroundColor: 'rgba(75,192,192,0.4)',\n                            borderColor: 'rgba(75,192,192,1)',\n                            borderCapStyle: 'butt',\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: 'miter',\n                            pointBorderColor: 'rgba(75,192,192,1)',\n                            pointBackgroundColor: '#fff',\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 1,\n                            pointHitRadius: 10,\n                            data: _.map(miner_count, 'miners'),\n                        },\n                    ],\n                }}\n                height={200}\n                options={{\n                    legend: { labels: { fontColor: '#F2ECE4' } },\n                    maintainAspectRatio: true,\n                    scales: {\n                        yAxes: [\n                            {\n                                ticks: {\n                                    fontColor: '#F2ECE4',\n                                },\n                            },\n                        ],\n                        xAxes: [\n                            {\n                                ticks: {\n                                    fontColor: '#F2ECE4',\n                                },\n                            },\n                        ],\n                    },\n                }}\n            />\n        </Card>\n    );\n}\n"],"sourceRoot":""}