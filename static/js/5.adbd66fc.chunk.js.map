{"version":3,"sources":["utils/hashrateUnitConverter.ts","components/pages/LiveProfit/HashrateCard.tsx","components/pages/LiveProfit/index.tsx"],"names":["EH","PH","TH","HashrateCard","algorithm_name","usd","btc","max_usd","max_btc","hashrate","percent","Math","abs","isEquihashUSD","payout","includes","toFixed","isEquihashBTC","className","hashrateUnitConverter","style","width","transition","memo","useSelector","state","ws","system","system_status","profitability","map","key"],"mappings":"sJAAMA,EAAa,KACbC,EAAa,KACbC,EAAa,IC2EJC,MAzEf,YAcI,IAbAC,EAaD,EAbCA,eACAC,EAYD,EAZCA,IACAC,EAWD,EAXCA,IACAC,EAUD,EAVCA,QACAC,EASD,EATCA,QACAC,EAQD,EARCA,SASMC,EAAoC,IAA1BC,KAAKC,IAAIP,EAAME,IAAkB,IAAM,IAAgC,IAA1BI,KAAKC,IAAIP,EAAME,GAE5E,SAASM,EAAcC,GACnB,OAAIV,EAAeW,SAAS,aAChBD,EAAS,IAAIE,QAAQ,IAEhB,IAATF,GAAcE,QAAQ,GAGlC,SAASC,EAAcH,GACnB,OAAIV,EAAeW,SAAS,aAChBD,EAAS,IAAIE,QAAQ,KAEhB,IAATF,GAAcE,QAAQ,IAGlC,OACI,kBAAC,IAAD,KACI,yBAAKE,UAAU,QACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,8BAA8Bd,GAC5C,0BAAMc,UAAU,yBDlCrB,SAA+BT,GAC1C,OAAIA,GAAYT,EACN,GAAN,QAAWS,EAAWT,GAAIgB,QAAQ,GAAlC,SACOP,GAAYR,EACb,GAAN,QAAWQ,EAAWR,GAAIe,QAAQ,GAAlC,SACOP,GAAYP,EACb,GAAN,QAAWO,EAAWP,GAAIc,QAAQ,GAAlC,SACOP,GAVI,IAWL,GAAN,QAAWA,EAXA,KAWeO,QAAQ,GAAlC,SACOP,GAXI,IAYL,GAAN,QAAWA,EAZA,KAYeO,QAAQ,GAAlC,SAEM,GAAN,OAAUP,EAASO,QAAQ,GAA3B,SCsBqDG,CAAsBV,KAEnE,yBAAKS,UAAU,kCACX,4BAAKL,EAAcN,GAAnB,SACA,0BAAMW,UAAU,yBAAyBD,EAAcT,GAAvD,aAGR,yBAAKU,UAAU,SACX,yBAAKA,UAAU,sCACX,yBACIA,UAAS,uBACLR,GAAW,GACL,0BACAA,GAAW,GACX,2BACA,uBALD,eAOTU,MAAO,CACHC,MAAM,GAAD,OAAKX,EAAL,KACLY,WAAY,aAGhB,yBACIJ,UAAS,6CACLR,EAAU,GAAK,cAAgB,mBAGnC,4BAAKG,EAAcR,GAAnB,SACA,0BAAMa,UAAU,yBAAyBD,EAAcX,GAAvD,iBCZbiB,0BAlDf,WACI,IAAMd,EAAgBe,aAAuB,SAACC,GAAD,OAAWA,EAAMC,GAAGjB,YAC3DkB,EAAcH,aAAuB,SAACC,GAAD,OAAWA,EAAMC,GAAGE,iBACzDC,EAAqBL,aAAuB,SAACC,GAAD,OAAWA,EAAMC,GAAGG,iBAEtE,OACI,kBAAC,IAAD,CAASX,UAAU,SACdW,GAAiBpB,GAAYkB,GAC1B,oCACI,yBAAKT,UAAU,QACX,wBAAIA,UAAU,iBAAd,qBACA,0BAAMA,UAAU,uCAAuCS,EAAO,IAC9D,wBAAIT,UAAU,sBAAd,oBACA,0BAAMA,UAAU,uCAAuCS,EAAO,KAElE,wBAAIT,UAAU,QACTW,EAAcC,KACX,gBACI1B,EADJ,EACIA,eACAC,EAFJ,EAEIA,IACAC,EAHJ,EAGIA,IACAC,EAJJ,EAIIA,QACAC,EALJ,EAKIA,QALJ,OAaI,kBAAC,EAAD,CACIuB,IAAK3B,EACLA,eAAgBA,EAChBC,IAAKA,EACLC,IAAKA,EACLC,QAASA,EACTC,QAASA,EACTC,SACIA,EAASL,GAAkBK,EAASL,GAAkB","file":"static/js/5.adbd66fc.chunk.js","sourcesContent":["const EH: number = 1000000000000000;\nconst PH: number = 1000000000000;\nconst TH: number = 1000000000;\nconst GH: number = 1000000;\nconst MH: number = 1000;\n\nexport default function hashrateUnitConverter(hashrate: number): string {\n    if (hashrate >= EH) {\n        return `${(hashrate / EH).toFixed(2)} EH/s`;\n    } else if (hashrate >= PH) {\n        return `${(hashrate / PH).toFixed(2)} PH/s`;\n    } else if (hashrate >= TH) {\n        return `${(hashrate / TH).toFixed(2)} TH/s`;\n    } else if (hashrate >= GH) {\n        return `${(hashrate / GH).toFixed(2)} GH/s`;\n    } else if (hashrate >= MH) {\n        return `${(hashrate / MH).toFixed(2)} MH/s`;\n    } else {\n        return `${hashrate.toFixed(2)} kH/s`;\n    }\n}\n","import React from 'react';\nimport { Card } from '../../core';\nimport hashrateUnitConverter from '../../../utils/hashrateUnitConverter';\n\nfunction HashrateCard({\n    algorithm_name,\n    usd,\n    btc,\n    max_usd,\n    max_btc,\n    hashrate,\n}: {\n    algorithm_name: string;\n    usd: number;\n    btc: number;\n    max_usd: number;\n    max_btc: number;\n    hashrate: number;\n}) {\n    const percent = Math.abs(usd / max_usd) * 100 >= 100 ? 100 : Math.abs(usd / max_usd) * 100;\n\n    function isEquihashUSD(payout: number) {\n        if (algorithm_name.includes('Equihash')) {\n            return (payout / 10).toFixed(6);\n        }\n        return (payout * 100).toFixed(6);\n    }\n\n    function isEquihashBTC(payout: number) {\n        if (algorithm_name.includes('Equihash')) {\n            return (payout / 10).toFixed(12);\n        }\n        return (payout * 100).toFixed(12);\n    }\n\n    return (\n        <Card>\n            <div className='flex'>\n                <div className='w-3/5'>\n                    <h1 className='-mt-1 text-2xl font-medium'>{algorithm_name}</h1>\n                    <span className='text-lg text-app_gray'>{hashrateUnitConverter(hashrate)}</span>\n                </div>\n                <div className='w-2/5 leading-tight text-right'>\n                    <h1>{isEquihashUSD(max_usd)} ¢</h1>\n                    <span className='text-xs text-app_gray'>{isEquihashBTC(max_btc)} ₿</span>\n                </div>\n            </div>\n            <div className='mt-12'>\n                <div className='w-auto h-4 rounded-md bg-app_ivory'>\n                    <div\n                        className={`relative h-4 ${\n                            percent >= 70\n                                ? 'bg-green-700 text-right'\n                                : percent >= 38\n                                ? 'bg-yellow-600 text-right'\n                                : 'bg-red-700 text-left'\n                        } rounded-md`}\n                        style={{\n                            width: `${percent}%`,\n                            transition: 'width 2s',\n                        }}\n                    >\n                        <div\n                            className={`absolute pt-1 -mt-12 leading-tight ${\n                                percent < 38 ? 'left-0 w-64' : 'right-2 w-auto'\n                            }`}\n                        >\n                            <h1>{isEquihashUSD(usd)} ¢</h1>\n                            <span className='text-xs text-app_gray'>{isEquihashBTC(btc)} ₿</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </Card>\n    );\n}\n\nexport default HashrateCard;\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Content } from '../../core';\nimport { RootState } from '../../../types';\nimport HashrateCard from './HashrateCard';\n\nfunction LiveProfit() {\n    const hashrate: any = useSelector<RootState>((state) => state.ws.hashrate);\n    const system: any = useSelector<RootState>((state) => state.ws.system_status);\n    const profitability: any = useSelector<RootState>((state) => state.ws.profitability);\n\n    return (\n        <Content className='pt-20'>\n            {profitability && hashrate && system && (\n                <>\n                    <div className='pl-4'>\n                        <h1 className='text-app_gray'>Connected workers</h1>\n                        <span className='text-2xl font-medium text-app_ivory'>{system[0]}</span>\n                        <h1 className='mt-2 text-app_gray'>Available blocks</h1>\n                        <span className='text-2xl font-medium text-app_ivory'>{system[1]}</span>\n                    </div>\n                    <ul className='mt-8'>\n                        {profitability.map(\n                            ({\n                                algorithm_name,\n                                usd,\n                                btc,\n                                max_usd,\n                                max_btc,\n                            }: {\n                                algorithm_name: string;\n                                usd: number;\n                                btc: number;\n                                max_usd: number;\n                                max_btc: number;\n                            }) => (\n                                <HashrateCard\n                                    key={algorithm_name}\n                                    algorithm_name={algorithm_name}\n                                    usd={usd}\n                                    btc={btc}\n                                    max_usd={max_usd}\n                                    max_btc={max_btc}\n                                    hashrate={\n                                        hashrate[algorithm_name] ? hashrate[algorithm_name] : 0\n                                    }\n                                />\n                            )\n                        )}\n                    </ul>\n                </>\n            )}\n        </Content>\n    );\n}\n\nexport default memo(LiveProfit);\n"],"sourceRoot":""}