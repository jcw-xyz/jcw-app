{"version":3,"sources":["../../source/PropTypes.js","../../../source/helpers/verboseDateFormatter.js","../../../source/helpers/date.js","../../source/updateIntervals.js","../../source/ReactTimeAgo.js","utils/stringToFixed.ts","components/pages/RecentBlocks/BlockCard.tsx","components/pages/RecentBlocks/index.tsx"],"names":["threshold","oneOfType","gradation","arrayOf","shape","unit","string","factor","granularity","format","func","style","units","flavour","custom","cache","createVerboseDateFormatter","locales","intlDateTimeFormatSupported","date","locale","localesFingerprint","resolvedLocales","intlDateTimeFormatSupportedLocale","resolveLocale","formatFingerprint","JSON","formatter","String","Intl","isDate","object","isMockedDate","HOUR","DAY","interval","ReactTimeAgo","value","timeStyle","tooltip","container","wrapperComponent","wrapperProps","formatVerboseDate","verboseDateFormat","updateInterval","tick","rest","preferredLocales","JavascriptTimeAgo","timeAgo","verboseDateFormatter","window","useState","setUnusedState","forceUpdate","autoUpdateTimer","useRef","getNextAutoUpdateDelay","getUpdateIntervalSetting","Array","intervals","time","now","Date","diff","Math","_interval","getUpdateIntervalBasedOnTime","scheduleNextTick","setTimeout","getVerboseDate","input","Error","convertToDate","useEffect","clearTimeout","verboseDate","undefined","timeElement","dateTime","title","stringToFixed","val","digit","parseFloat","toFixed","PropTypes","isRequired","weekday","day","month","year","hour","minute","second","BlockCard","worker_name","coin_name","is_accepted","block_height","coinbase_value","transaction_fees","snapshot_value_usd","algorithm","auxiliary","is_stale","img_url","useSelector","state","api","coin","_","find","imgPath","image_filename","className","src","alt","icon","faCube","toString","replace","memo","blocks","ws","length","map","block_hash","key"],"mappings":"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","file":"static/js/9.70a41818.chunk.js","sourcesContent":["import {\r\n\toneOfType,\r\n\tarrayOf,\r\n\tstring,\r\n\tnumber,\r\n\tshape,\r\n\tfunc\r\n} from 'prop-types'\r\n\r\nconst threshold = oneOfType([\r\n\tnumber,\r\n\tfunc\r\n])\r\n\r\nconst gradation = arrayOf(oneOfType([\r\n\tshape({\r\n\t\tunit        : string.isRequired,\r\n\t\tfactor      : number,\r\n\t\tgranularity : number,\r\n\t\tthreshold\r\n\t\t// Specific `threshold_[unit]` properties may also be defined\r\n\t}),\r\n\tshape({\r\n\t\tformat : func.isRequired,\r\n\t\tthreshold\r\n\t\t// Specific `threshold_[unit]` properties may also be defined\r\n\t})\r\n]))\r\n\r\n// Date/time formatting style.\r\n// E.g. 'twitter', 'fuzzy', or custom (`{ gradation: […], units: […], flavour: 'long', custom: function }`)\r\nexport const style = oneOfType([\r\n\tstring,\r\n\tshape({\r\n\t\tgradation,\r\n\t\tunits   : arrayOf(string),\r\n\t\tflavour : oneOfType([\r\n\t\t\tstring,\r\n\t\t\tarrayOf(string)\r\n\t\t]),\r\n\t\tcustom : func\r\n\t})\r\n])","import\r\n{\r\n\tintlDateTimeFormatSupported,\r\n\tintlDateTimeFormatSupportedLocale\r\n}\r\nfrom 'javascript-time-ago'\r\n\r\nimport Cache from 'javascript-time-ago/cache'\r\n\r\nconst cache = new Cache()\r\n\r\n/**\r\n * Creates verbose date formatter.\r\n * \r\n * @param {string} locale - Date formatting locale\r\n * @param {object} format - Output format\r\n * @param {string} format.day     - Day format\r\n * @param {string} format.month   - Month format\r\n * @param {string} format.year    - Year format\r\n * @param {string} format.weekday - Weekday format\r\n * @param {string} format.hour    - Hour format\r\n * @param {string} format.minute  - Minute format\r\n * @param {string} format.second  - Second format\r\n *\r\n * @returns {Function} `(date) -> string`.\r\n */\r\nexport default function createVerboseDateFormatter(locales, format)\r\n{\r\n\t// Fall back to `date.toString()` for old web browsers.\r\n\t// https://caniuse.com/#search=intl\r\n\tif (!intlDateTimeFormatSupported()) {\r\n\t\treturn date => date.toString()\r\n\t}\r\n\r\n\t// If none of the `locales` are supported\r\n\t// a default system locale will be used.\r\n\tconst locale = resolveLocale(locales)\r\n\r\n\t// `Intl.DateTimeFormat` format caching key.\r\n\t// E.g. `\"{\"day\":\"numeric\",\"month\":\"short\",...}\"`.\r\n\t// Didn't benchmark what's faster:\r\n\t// creating a new `Intl.DateTimeFormat` instance\r\n\t// or stringifying a small JSON `format`.\r\n\t// Perhaps strigifying JSON `format` is faster.\r\n\tconst formatFingerprint = JSON.stringify(format)\r\n\r\n\t// Get `Intl.DateTimeFormat` instance for these `locale` and `format`.\r\n\t// (`locale` can be `undefined` therefore `String(locale)`)\r\n\tconst formatter = cache.get(String(locale), formatFingerprint) ||\r\n\t\tcache.put(String(locale), formatFingerprint, new Intl.DateTimeFormat(locale, format))\r\n\r\n\t// Return date formatter\r\n\treturn date => formatter.format(date)\r\n}\r\n\r\n// Caching locale resolving for optimizing pages \r\n// with a lot of `<ReactTimeAgo/>` elements (say, 100 or more).\r\n// `Intl.DateTimeFormat.supportedLocalesOf(locales)` is not instantaneous.\r\n// For example, it could be 25 milliseconds for 200 calls.\r\nconst resolvedLocales = {}\r\n\r\n/**\r\n * Resolves a list of possible locales to a single (\"best fit\") supported locale.\r\n * @param  {string[]} locales\r\n * @return {string}\r\n */\r\nfunction resolveLocale(locales) {\r\n\tconst localesFingerprint = locales.toString()\r\n\tif (resolvedLocales[localesFingerprint]) {\r\n\t\treturn resolvedLocales[localesFingerprint] \r\n\t}\r\n\treturn resolvedLocales[localesFingerprint] = intlDateTimeFormatSupportedLocale(locales)\r\n}","/**\r\n * Converts value to a `Date`\r\n * @param {(number|Date)} value\r\n * @return {Date}\r\n */\r\nexport function getDate(value) {\r\n\treturn isDate(value) ? value : new Date(value)\r\n}\r\n\r\n/**\r\n * Converts value to a timestamp.\r\n * @param {(number|Date)} value\r\n * @return {number}\r\n */\r\nexport function getTime(value) {\r\n\treturn isDate(value) ? value.getTime() : value\r\n}\r\n\r\nfunction isDate(object) {\r\n\treturn object instanceof Date || isMockedDate(object)\r\n}\r\n\r\n// During testing via some testing libraries `Date`s aren't actually `Date`s.\r\n// https://github.com/catamphetamine/javascript-time-ago/issues/22\r\nexport function isMockedDate(object) {\r\n\treturn typeof object === 'object' && typeof object.getTime === 'function'\r\n}","// Stupid Rollup doesn't know how to property read \"default\" export.\r\n\r\nconst MINUTE = 60 * 1000\r\nconst HOUR = 60 * MINUTE\r\nconst DAY = 24 * HOUR\r\nconst MONTH = 30 * DAY\r\nconst YEAR = 365 * DAY\r\n\r\n// For standard `timeStyle`s, \"smart\" autoupdate interval is used:\r\n// every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\r\n// \"Smart\" autoupdate intervals should be moved to `javascript-time-ago`'s grading scale.\r\nexport default [{\r\n\tinterval: MINUTE\r\n}, {\r\n\tthreshold: HOUR,\r\n\tinterval: 10 * MINUTE\r\n}, {\r\n\tthreshold: 12 * HOUR,\r\n\tinterval: 20 * MINUTE\r\n}, {\r\n\tthreshold: DAY,\r\n\tinterval: 3 * HOUR\r\n}, {\r\n\tthreshold: 7 * DAY,\r\n\tinterval: 6 * HOUR\r\n}, {\r\n\tthreshold: MONTH,\r\n\tinterval: 5 * DAY\r\n}, {\r\n\tthreshold: 3 * MONTH,\r\n\tinterval: 10 * DAY\r\n}, {\r\n\tthreshold: YEAR,\r\n\tinterval: MONTH\r\n}]","import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport JavascriptTimeAgo from 'javascript-time-ago'\r\nimport { style } from 'javascript-time-ago/prop-types'\r\n\r\nimport createVerboseDateFormatter from './helpers/verboseDateFormatter'\r\nimport { getDate, getTime, isMockedDate } from './helpers/date'\r\n\r\n// Stupid Rollup doesn't know how to property read \"default\" export.\r\nimport UPDATE_INTERVALS from './updateIntervals'\r\n\r\n// `setTimeout()` would enter an infinite cycle when interval is a `MONTH`.\r\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\r\nconst SET_TIMEOUT_MAX_DELAY = 2147483647\r\n\r\nexport default function ReactTimeAgo({\r\n\tdate,\r\n\ttimeStyle,\r\n\ttooltip,\r\n\t// `container` property name is deprecated, \r\n\t// use `wrapperComponent` property name instead.\r\n\tcontainer,\r\n\twrapperComponent,\r\n\twrapperProps,\r\n\tlocale,\r\n\tlocales,\r\n\tformatVerboseDate,\r\n\tverboseDateFormat,\r\n\tupdateInterval,\r\n\ttick,\r\n\t...rest\r\n}) {\r\n\t// Composes a list of preferred locales\r\n\tconst preferredLocales = useMemo(() => {\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(JavascriptTimeAgo.getDefaultLocale())\r\n\t}, [\r\n\t\tlocale,\r\n\t\tlocales\r\n\t])\r\n\r\n\t// Create `javascript-time-ago` formatter instance.\r\n\tconst timeAgo = useMemo(() => {\r\n\t\treturn new JavascriptTimeAgo(preferredLocales)\r\n\t}, [\r\n\t\tpreferredLocales\r\n\t])\r\n\r\n\t// Create verbose date formatter for the tooltip text.\r\n\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\tconst verboseDateFormatter = useMemo(() => {\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\treturn createVerboseDateFormatter(preferredLocales, verboseDateFormat)\r\n\t\t}\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tverboseDateFormat\r\n\t])\r\n\r\n\tconst [unusedState, setUnusedState] = useState()\r\n\tconst forceUpdate = useCallback(() => setUnusedState({}), [setUnusedState])\r\n\r\n\tconst autoUpdateTimer = useRef()\r\n\r\n\tconst getNextAutoUpdateDelay = useCallback(() => {\r\n\t\tconst interval = getUpdateIntervalSetting(updateInterval, timeStyle)\r\n\t\tif (Array.isArray(interval)) {\r\n\t\t\treturn getUpdateIntervalBasedOnTime(interval, date)\r\n\t\t}\r\n\t\treturn interval\r\n\t}, [\r\n\t\tdate, \r\n\t\ttimeStyle, \r\n\t\tupdateInterval\r\n\t])\r\n\r\n\tconst scheduleNextTick = useCallback(() => {\r\n\t\t// Register for the relative time autoupdate as the time goes by.\r\n\t\tautoUpdateTimer.current = setTimeout(() => {\r\n\t\t\tforceUpdate()\r\n\t\t\tscheduleNextTick()\r\n\t\t}, getNextAutoUpdateDelay())\r\n\t}, [\r\n\t\tforceUpdate,\r\n\t\tgetNextAutoUpdateDelay\r\n\t])\r\n\r\n\t// Verbose date string.\r\n\t// Is used as a tooltip text.\r\n\t//\r\n\t// E.g. \"Sunday, May 18th, 2012, 18:45\"\r\n\t//\r\n\tconst getVerboseDate = useCallback((input) => {\r\n\t\tconst date = convertToDate(input)\r\n\t\tif (formatVerboseDate) {\r\n\t\t\treturn formatVerboseDate(date)\r\n\t\t}\r\n\t\treturn verboseDateFormatter(date)\r\n\t}, [\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormatter\r\n\t])\r\n\r\n\tuseEffect(() => {\r\n\t\t// If time label autoupdates are enabled.\r\n\t\tif (tick) {\r\n\t\t\tscheduleNextTick()\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tclearTimeout(autoUpdateTimer.current)\r\n\t\t}\r\n\t}, [])\r\n\r\n\t// The date or timestamp that was passed.\r\n\t// Convert timestamp to `Date`.\r\n\tdate = getDate(date)\r\n\r\n\t// Format verbose date for the tooltip.\r\n\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\tconst verboseDate = typeof window === 'undefined' ? undefined : getVerboseDate(date)\r\n\r\n\tconst timeElement = (\r\n\t\t<time\r\n\t\t\tdateTime={date.toISOString()}\r\n\t\t\ttitle={tooltip ? verboseDate : undefined} \r\n\t\t\t{...rest}>\r\n\t\t\t{timeAgo.format(date, timeStyle)}\r\n\t\t</time>\r\n\t)\r\n\r\n\tif (wrapperComponent || container) {\r\n\t\treturn React.createElement(\r\n\t\t\twrapperComponent || container,\r\n\t\t\t{\r\n\t\t\t\tverboseDate,\r\n\t\t\t\t...wrapperProps\r\n\t\t\t},\r\n\t\t\ttimeElement\r\n\t\t)\r\n\t}\r\n\r\n\treturn timeElement\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// The `date` or `timestamp`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Preferred locales (ordered).\r\n\t// Will choose the first suitable locale from this list.\r\n\t// (the one that has been initialized)\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// Date/time formatting style.\r\n\t// E.g. 'twitter', 'time', or custom (`{ gradation: […], units: […], flavour: 'long', custom: function }`)\r\n\ttimeStyle: style,\r\n\r\n\t// Whether HTML `tooltip` attribute should be set\r\n\t// to verbosely formatted date (is `true` by default).\r\n\t// Set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\r\n\t// An optional function returning what will be output in the HTML `title` tooltip attribute.\r\n\t// (by default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`)\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for the HTML `title` tooltip attribute.\r\n\t// Is used when `formatVerboseDate` is not specified.\r\n\t// By default outputs a verbose date.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// How often to update all `<ReactTimeAgo/>` elements on a page.\r\n\t// (is once in a minute by default)\r\n\t// This setting is only used for \"custom\" `timeStyle`s.\r\n\t// For standard `timeStyle`s, \"smart\" autoupdate interval is used:\r\n\t// every minute for the first hour, then every 10 minutes for the first 12 hours, and so on.\r\n\tupdateInterval: PropTypes.oneOfType([\r\n\t\tPropTypes.number,\r\n\t\tPropTypes.arrayOf(PropTypes.shape({\r\n\t\t\tthreshold: PropTypes.number,\r\n\t\t\tinterval: PropTypes.number.isRequired\r\n\t\t}))\r\n\t]),\r\n\r\n\t// Set to `false` to disable automatic refresh of\r\n\t// `<ReactTimeAgo/>` elements on a page as time goes by.\r\n\t// (is `true` by default)\r\n\ttick: PropTypes.bool,\r\n\r\n\t// React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// Also receives `wrapperProps`, if they're passed.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t//\r\n\t// ```js\r\n\t// import React from 'react'\r\n\t// import ReactTimeAgo from 'react-time-ago'\r\n\t// import { Tooltip } from 'react-responsive-ui'\r\n\t// \r\n\t// export default function TimeAgo(props) {\r\n\t//   return (\r\n\t//     <ReactTimeAgo \r\n\t//       {...props} \r\n\t//       wrapperComponent={Wrapper} \r\n\t//       tooltip={false}/>\r\n\t//   )\r\n\t// }\r\n\t// \r\n\t// const Wrapper = ({ verboseDate, children, ...rest }) => (\r\n\t//   <Tooltip {...rest} content={verboseDate}>\r\n\t//     {children}\r\n\t//   </Tooltip>\r\n\t// )\r\n\t// ```\r\n\t//\r\n\twrapperComponent: PropTypes.func,\r\n\r\n\t// Custom `props` passed to `wrapperComponent`.\r\n\twrapperProps: PropTypes.object\r\n}\r\n\r\nReactTimeAgo.defaultProps = {\r\n\t// No preferred locales.\r\n\tlocales: [],\r\n\r\n\t// Show verbose date `title` tooltip on mouse over.\r\n\ttooltip: true,\r\n\r\n\t// Thursday, December 20, 2012, 7:00:00 AM GMT+4\r\n\tverboseDateFormat: {\r\n\t\tweekday      : 'long',\r\n\t\tday          : 'numeric',\r\n\t\tmonth        : 'long',\r\n\t\tyear         : 'numeric',\r\n\t\thour         : 'numeric',\r\n\t\tminute       : '2-digit',\r\n\t\tsecond       : '2-digit',\r\n\t\t// timeZoneName : 'short'\r\n\t},\r\n\r\n\t// // Updates once a minute\r\n\t// updateInterval: MINUTE,\r\n\r\n\t// Refreshes time in a web browser by default\r\n\ttick: true\r\n}\r\n\r\n// Converts argument into a `Date`.\r\nfunction convertToDate(input) {\r\n\tif (input.constructor === Date || isMockedDate(input)) {\r\n\t\treturn input\r\n\t}\r\n\tif (typeof input === 'number') {\r\n\t\treturn new Date(input)\r\n\t}\r\n\tthrow new Error(`Unsupported react-time-ago input: ${typeof input}, ${input}`)\r\n}\r\n\r\nfunction getUpdateIntervalSetting(updateInterval, timeStyle) {\r\n\tif (updateInterval === undefined) {\r\n\t\t// \"Smart\" autoupdate intervals are only used for standard time styles.\r\n\t\tif (typeof timeStyle === 'object') {\r\n\t\t\treturn MINUTE\r\n\t\t}\r\n\t\treturn UPDATE_INTERVALS\r\n\t}\r\n\treturn updateInterval\r\n}\r\n\r\nfunction getUpdateIntervalBasedOnTime(intervals, date) {\r\n\tconst time = getTime(date)\r\n\tconst now = Date.now()\r\n\tconst diff = Math.abs(now - time)\r\n\tlet _interval\r\n\tfor (const { interval, threshold } of intervals) {\r\n\t\tif (threshold && diff < threshold) {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\t_interval = interval\r\n\t}\r\n\treturn Math.min(_interval, SET_TIMEOUT_MAX_DELAY)\r\n}","export default function stringToFixed(val: string, digit: number) {\n    return parseFloat(val).toFixed(digit);\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../types';\nimport { Card } from '../../core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCube } from '@fortawesome/free-solid-svg-icons';\nimport ReactTimeAgo from 'react-time-ago';\nimport stringToFixed from '../../../utils/stringToFixed';\nimport _ from 'lodash';\n\nexport default function BlockCard({\n    worker_name,\n    coin_name,\n    is_accepted,\n    block_height,\n    coinbase_value,\n    transaction_fees,\n    snapshot_value_usd,\n    auxiliary,\n    algorithm,\n    is_stale,\n    now,\n}: {\n    worker_name: string;\n    coin_name: string;\n    is_accepted: boolean;\n    block_height: number;\n    coinbase_value: string;\n    transaction_fees: string;\n    snapshot_value_usd: string;\n    auxiliary: boolean;\n    algorithm: string;\n    is_stale: boolean;\n    now: Date;\n}) {\n    const img_url: any = useSelector<RootState>((state) => state.api.img_url);\n    const coin = _.find(img_url, ['name', coin_name]);\n    const imgPath = `https://images.prohashing.com/coins/${coin.image_filename}`;\n\n    return (\n        <Card className='relative flex justify-between text-xs fade-in lg:text-base'>\n            <div className='float-left w-1/6 h-full'>\n                <div className='w-12 lg:w-16 lg:h-16'>\n                    <img className='object-contain' src={imgPath} alt='coin' />\n                </div>\n                <div className='mt-3'>\n                    <h1 className='font-medium truncate text-app_ivory'>{coin_name}</h1>\n                    <span className=' text-app_gray'>{algorithm}</span>\n                </div>\n            </div>\n            <div className='flex justify-between w-5/6 h-full ml-4'>\n                <div className='w-2/5 ml-2'>\n                    <div>\n                        <span className=' text-app_gray'>Miner</span>\n                        <h1 className='truncate text-app_ivory'>{worker_name}</h1>\n                    </div>\n                    <div className='mt-2'>\n                        <span className=' text-app_gray'>Value</span>\n                        <h1 className='to-app_ivory'>$ {stringToFixed(snapshot_value_usd, 3)}</h1>\n                    </div>\n                </div>\n                <div className='w-2/5 ml-2'>\n                    <div>\n                        <span className=' text-app_gray'>Block Reward</span>\n                        <h1 className='text-app_ivory'>{stringToFixed(coinbase_value, 3)}</h1>\n                    </div>\n                    <div className='mt-2'>\n                        <span className=' text-app_gray'>Txn Fee</span>\n                        <h1 className='to-app_ivory'>{stringToFixed(transaction_fees, 3)}</h1>\n                    </div>\n                </div>\n                <div className='w-1/5 text-right'>\n                    <div>\n                        <span className='text-app_gray'>Status</span>\n                        <h1 className='text-app_ivory'>\n                            {is_accepted ? 'Accepted' : is_stale ? 'Stale' : 'Immature'}\n                        </h1>\n                    </div>\n                    <div className='absolute bottom-4 right-4'>\n                        <div className='text-app_gray'>\n                            <FontAwesomeIcon icon={faCube} />\n                            <span className='ml-1'>\n                                {block_height.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                            </span>\n                        </div>\n                        <ReactTimeAgo className='text-app_ivory' date={now} />\n                    </div>\n                </div>\n            </div>\n        </Card>\n    );\n}\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Content } from '../../core';\nimport { RootState } from '../../../types';\nimport BlockCard from './BlockCard';\n\nfunction RecentBlocks() {\n    const blocks: any = useSelector<RootState>((state) => state.ws.blocks);\n    return (\n        <Content className='pt-20'>\n            {blocks.length > 1 ? (\n                <ul>\n                    {blocks.map(\n                        ({\n                            worker_name,\n                            coin_name,\n                            is_accepted,\n                            block_height,\n                            block_hash,\n                            coinbase_value,\n                            transaction_fees,\n                            snapshot_value_usd,\n                            auxiliary,\n                            algorithm,\n                            is_stale,\n                            now,\n                        }: {\n                            worker_name: string;\n                            coin_name: string;\n                            is_accepted: boolean;\n                            block_height: number;\n                            block_hash: string;\n                            coinbase_value: string;\n                            transaction_fees: string;\n                            snapshot_value_usd: string;\n                            auxiliary: boolean;\n                            algorithm: string;\n                            is_stale: boolean;\n                            now: Date;\n                        }) => (\n                            <BlockCard\n                                key={coin_name + block_hash}\n                                worker_name={worker_name || 'Null'}\n                                coin_name={coin_name || 'Null'}\n                                is_accepted={is_accepted || false}\n                                block_height={block_height || 0}\n                                coinbase_value={coinbase_value || '0'}\n                                transaction_fees={transaction_fees || '0'}\n                                snapshot_value_usd={snapshot_value_usd || '0'}\n                                auxiliary={auxiliary || false}\n                                algorithm={algorithm || 'Null'}\n                                is_stale={is_stale || false}\n                                now={now}\n                            />\n                        )\n                    )}\n                </ul>\n            ) : (\n                <h1 className='pt-2 text-center text-app_gray'>Waiting for new blocks to appear</h1>\n            )}\n        </Content>\n    );\n}\n\nexport default memo(RecentBlocks);\n"],"sourceRoot":""}